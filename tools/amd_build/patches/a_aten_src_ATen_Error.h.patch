diff --git a/aten/src/ATen/Error.h b/aten/src/ATen/Error.h
index b68779144..faea76bff 100644
--- a/aten/src/ATen/Error.h
+++ b/aten/src/ATen/Error.h
@@ -16,10 +16,10 @@
 
 #include <stdarg.h>
 
-#if !defined(_WIN32)
+#if !defined(__HIP_PLATFORM_HCC__)
 #include <cxxabi.h>
 #include <execinfo.h>
-#endif // !defined(_WIN32)
+#endif // !defined(__HIP_PLATFORM_HCC__)
 
 #if defined(_MSC_VER) && _MSC_VER <= 1900
 #define __func__ __FUNCTION__
@@ -33,7 +33,7 @@ namespace detail {
 // https://stackoverflow.com/questions/5693192/win32-backtrace-from-c-code
 // https://stackoverflow.com/questions/26398064/counterpart-to-glibcs-backtrace-and-backtrace-symbols-on-windows
 // https://msdn.microsoft.com/en-us/library/windows/desktop/bb204633%28v=vs.85%29.aspx.
-#if !defined(_WIN32)
+#if !defined(__HIP_PLATFORM_HCC__)
 struct FrameInformation {
   /// If available, the demangled name of the function at this frame, else
   /// whatever (possibly mangled) name we got from `backtrace()`.
@@ -199,7 +199,7 @@ inline std::string get_backtrace(
 
   return stream.str();
 }
-#endif // !defined(_WIN32)
+#endif // !defined(__HIP_PLATFORM_HCC__)
 
 /// A tiny implementation of static `all_of`.
 template <bool...>
@@ -255,10 +255,10 @@ struct AT_API Error : public std::exception {
         detail::all_of<std::is_literal_type<FormatArgs>::value...>::value,
         "format arguments must be literal types!");
     what_ += " (" + source_location.toString() + ")\n";
-#if !defined(_WIN32)
+#if !defined(__HIP_PLATFORM_HCC__)
     // Skip this constructor's frame.
     what_ += detail::get_backtrace(/*frames_to_skip=*/1);
-#endif // !defined(_WIN32)
+#endif // !defined(__HIP_PLATFORM_HCC__)
   }
 
   /// Returns the complete error message, including the source location.

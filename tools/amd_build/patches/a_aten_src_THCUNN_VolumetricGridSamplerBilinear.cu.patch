diff --git a/aten/src/THCUNN/VolumetricGridSamplerBilinear.cu b/aten/src/THCUNN/VolumetricGridSamplerBilinear.cu
index 6fa8ae1fd..4b9e95939 100644
--- a/aten/src/THCUNN/VolumetricGridSamplerBilinear.cu
+++ b/aten/src/THCUNN/VolumetricGridSamplerBilinear.cu
@@ -66,7 +66,7 @@ __global__ void VolumetricGridSamplerBilinear_updateOutput_kernel(
     int ix_tnw = floor(ScalarConvert<Dtype,float>::to(ix));
     int iy_tnw = floor(ScalarConvert<Dtype,float>::to(iy));
     int iz_tnw = floor(ScalarConvert<Dtype,float>::to(iz));
-    
+
     int ix_tne = ix_tnw + 1;
     int iy_tne = iy_tnw;
     int iz_tne = iz_tnw;
@@ -138,28 +138,28 @@ __global__ void VolumetricGridSamplerBilinear_updateOutput_kernel(
     for (c = 0; c < C; ++c) {
       out_val = ScalarConvert<int,Dtype>::to(0);
       if (WITHIN_BOUNDS(ix_tnw, iy_tnw, iz_tnw, ID, IH, IW)) {
-        out_val += input[n][c][iz_tnw][iy_tnw][ix_tnw] * tnw;
+        out_val += (input[n][c][iz_tnw][iy_tnw][ix_tnw]).template as<Dtype>() * tnw;
       }
       if (WITHIN_BOUNDS(ix_tne, iy_tne, iz_tne, ID, IH, IW)) {
-        out_val += input[n][c][iz_tne][iy_tne][ix_tne] * tne;
+        out_val += (input[n][c][iz_tne][iy_tne][ix_tne]).template as<Dtype>() * tne;
       }
       if (WITHIN_BOUNDS(ix_tsw, iy_tsw, iz_tsw, ID, IH, IW)) {
-        out_val += input[n][c][iz_tsw][iy_tsw][ix_tsw] * tsw;
+        out_val += (input[n][c][iz_tsw][iy_tsw][ix_tsw]).template as<Dtype>() * tsw;
       }
       if (WITHIN_BOUNDS(ix_tse, iy_tse, iz_tse, ID, IH, IW)) {
-        out_val += input[n][c][iz_tse][iy_tse][ix_tse] * tse;
+        out_val += (input[n][c][iz_tse][iy_tse][ix_tse]).template as<Dtype>() * tse;
       }
       if (WITHIN_BOUNDS(ix_bnw, iy_bnw, iz_bnw, ID, IH, IW)) {
-        out_val += input[n][c][iz_bnw][iy_bnw][ix_bnw] * bnw;
+        out_val += (input[n][c][iz_bnw][iy_bnw][ix_bnw]).template as<Dtype>() * bnw;
       }
       if (WITHIN_BOUNDS(ix_bne, iy_bne, iz_bne, ID, IH, IW)) {
-        out_val += input[n][c][iz_bne][iy_bne][ix_bne] * bne;
+        out_val += (input[n][c][iz_bne][iy_bne][ix_bne]).template as<Dtype>() * bne;
       }
       if (WITHIN_BOUNDS(ix_bsw, iy_bsw, iz_bsw, ID, IH, IW)) {
-        out_val += input[n][c][iz_bsw][iy_bsw][ix_bsw] * bsw;
+        out_val += (input[n][c][iz_bsw][iy_bsw][ix_bsw]).template as<Dtype>() * bsw;
       }
       if (WITHIN_BOUNDS(ix_bse, iy_bse, iz_bse, ID, IH, IW)) {
-        out_val += input[n][c][iz_bse][iy_bse][ix_bse] * bse;
+        out_val += (input[n][c][iz_bse][iy_bse][ix_bse]).template as<Dtype>() * bse;
       }
       output[n][c][d][h][w] = out_val;
     }
@@ -211,7 +211,7 @@ __global__ void VolumetricGridSamplerBilinear_updateGradInput_kernel(
     int ix_tnw = floor(ScalarConvert<Dtype,float>::to(ix));
     int iy_tnw = floor(ScalarConvert<Dtype,float>::to(iy));
     int iz_tnw = floor(ScalarConvert<Dtype,float>::to(iz));
-    
+
     int ix_tne = ix_tnw + 1;
     int iy_tne = iy_tnw;
     int iz_tne = iz_tnw;
@@ -259,7 +259,7 @@ __global__ void VolumetricGridSamplerBilinear_updateGradInput_kernel(
     Dtype bne_val;
     Dtype bsw_val;
     Dtype bse_val;
-    
+
     int ix_tnw_cl, iy_tnw_cl, iz_tnw_cl, ix_tne_cl, iy_tne_cl, iz_tne_cl;
     int ix_tsw_cl, iy_tsw_cl, iz_tsw_cl, ix_tse_cl, iy_tse_cl, iz_tse_cl;
     int ix_bnw_cl, iy_bnw_cl, iz_bnw_cl, ix_bne_cl, iy_bne_cl, iz_bne_cl;

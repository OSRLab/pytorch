diff --git a/aten/src/THC/THCNumerics.cuh b/aten/src/THC/THCNumerics.cuh
index cbc2743d9..aceb91877 100644
--- a/aten/src/THC/THCNumerics.cuh
+++ b/aten/src/THC/THCNumerics.cuh
@@ -140,14 +140,14 @@ struct THCNumerics<int64_t> {
   static inline __host__ __device__  int64_t mul(int64_t a, int64_t b) { return a * b; }
   static inline __host__ __device__  int64_t sub(int64_t a, int64_t b) { return a - b; }
   static inline __host__ __device__  int64_t div(int64_t a, int64_t b) { return a / b; };
-  static inline __host__ __device__  int64_t abs(int64_t a) { return labs(a); }
+  static inline __host__ __device__  int64_t abs(int64_t a) { return fabs(a); }
   static inline __host__ __device__  int64_t pow(int64_t a, int64_t b) { return powi<int64_t>(a, b); }
 };
 
 #ifdef CUDA_HALF_TENSOR
 template <>
 struct THCNumerics<half> {
-#if CUDA_VERSION < 9000
+#if CUDA_VERSION < 9000 && !defined(__HIP_PLATFORM_HCC__)
   static inline __host__ __device__ half min() { half h; h.x = 0xfbff; return h; }
   static inline __host__ __device__ half max() { half h; h.x = 0x7bff; return h; }
 #else
@@ -156,7 +156,7 @@ struct THCNumerics<half> {
 #endif
 
   static inline __host__ __device__ bool lt(half a, half b) {
-#ifdef __CUDA_ARCH__
+#if defined(__CUDA_ARCH__) || defined(__HIP_PLATFORM_HCC__)
 #ifdef CUDA_HALF_INSTRUCTIONS
     return __hlt(a, b);
 #else
@@ -170,7 +170,7 @@ struct THCNumerics<half> {
   }
 
   static inline __host__ __device__ bool le(half a, half b) {
-#ifdef __CUDA_ARCH__
+#if defined(__CUDA_ARCH__) || defined(__HIP_PLATFORM_HCC__)
 #ifdef CUDA_HALF_INSTRUCTIONS
     return __hle(a, b);
 #else
@@ -184,7 +184,7 @@ struct THCNumerics<half> {
   }
 
   static inline __host__ __device__ bool gt(half a, half b) {
-#ifdef __CUDA_ARCH__
+#if defined(__CUDA_ARCH__) || defined(__HIP_PLATFORM_HCC__)
 #ifdef CUDA_HALF_INSTRUCTIONS
     return __hgt(a, b);
 #else
@@ -198,7 +198,7 @@ struct THCNumerics<half> {
   }
 
   static inline __host__ __device__ bool ge(half a, half b) {
-#ifdef __CUDA_ARCH__
+#if defined(__CUDA_ARCH__) || defined(__HIP_PLATFORM_HCC__)
 #ifdef CUDA_HALF_INSTRUCTIONS
     return __hge(a, b);
 #else
@@ -212,7 +212,7 @@ struct THCNumerics<half> {
   }
 
   static inline __host__ __device__ bool eq(half a, half b) {
-#ifdef __CUDA_ARCH__
+#if defined(__CUDA_ARCH__) || defined(__HIP_PLATFORM_HCC__)
 #ifdef CUDA_HALF_INSTRUCTIONS
     return __heq(a, b);
 #else
@@ -226,7 +226,7 @@ struct THCNumerics<half> {
   }
 
   static inline __host__ __device__ bool ne(half a, half b) {
-#ifdef __CUDA_ARCH__
+#if defined(__CUDA_ARCH__) || defined(__HIP_PLATFORM_HCC__)
 #ifdef CUDA_HALF_INSTRUCTIONS
     return __hne(a, b);
 #else
@@ -240,7 +240,7 @@ struct THCNumerics<half> {
   }
 
   static inline __host__ __device__ half exp(half a) {
-#ifdef __CUDA_ARCH__
+#if defined(__CUDA_ARCH__) || defined(__HIP_PLATFORM_HCC__)
 #ifdef CUDA_HALF_INSTRUCTIONS
     return hexp(a);
 #else
@@ -253,7 +253,7 @@ struct THCNumerics<half> {
   }
 
   static inline __host__ __device__ half exp10(half a) {
-#ifdef __CUDA_ARCH__
+#if defined(__CUDA_ARCH__) || defined(__HIP_PLATFORM_HCC__)
 #ifdef CUDA_HALF_INSTRUCTIONS
     return hexp10(a);
 #else
@@ -266,7 +266,7 @@ struct THCNumerics<half> {
   }
 
   static inline __host__ __device__ half log(half a) {
-#ifdef __CUDA_ARCH__
+#if defined(__CUDA_ARCH__) || defined(__HIP_PLATFORM_HCC__)
 #ifdef CUDA_HALF_INSTRUCTIONS
     return hlog(a);
 #else
@@ -279,7 +279,7 @@ struct THCNumerics<half> {
   }
 
   static inline __host__ __device__ half log10(half a) {
-#ifdef __CUDA_ARCH__
+#if defined(__CUDA_ARCH__) || defined(__HIP_PLATFORM_HCC__)
     float fa = __half2float(a);
     return __float2half(log10f(fa));
 #else // __CUDA_ARCH__
@@ -288,7 +288,7 @@ struct THCNumerics<half> {
   }
 
   static inline __host__ __device__ half log1p(half a) {
-#ifdef __CUDA_ARCH__
+#if defined(__CUDA_ARCH__) || defined(__HIP_PLATFORM_HCC__)
     float fa = __half2float(a);
     return __float2half(log1pf(fa));
 #else // __CUDA_ARCH__
@@ -297,7 +297,7 @@ struct THCNumerics<half> {
   }
 
   static inline __host__ __device__ half log2(half a) {
-#ifdef __CUDA_ARCH__
+#if defined(__CUDA_ARCH__) || defined(__HIP_PLATFORM_HCC__)
     float fa = __half2float(a);
     return __float2half(log2f(fa));
 #else // __CUDA_ARCH__
@@ -306,7 +306,7 @@ struct THCNumerics<half> {
   }
 
 static inline __host__ __device__ half lgamma(half a) {
-#ifdef __CUDA_ARCH__
+#if defined(__CUDA_ARCH__) || defined(__HIP_PLATFORM_HCC__)
     float fa = __half2float(a);
     return __float2half(lgammaf(fa));
 #else // __CUDA_ARCH__
@@ -315,7 +315,7 @@ static inline __host__ __device__ half lgamma(half a) {
   }
 
   static inline __host__ __device__ half expm1(half a) {
-#ifdef __CUDA_ARCH__
+#if defined(__CUDA_ARCH__) || defined(__HIP_PLATFORM_HCC__)
     float fa = __half2float(a);
     return __float2half(expm1f(fa));
 #else // __CUDA_ARCH__
@@ -324,7 +324,7 @@ static inline __host__ __device__ half lgamma(half a) {
   }
 
   static inline __host__ __device__ half cos(half a) {
-#ifdef __CUDA_ARCH__
+#if defined(__CUDA_ARCH__) || defined(__HIP_PLATFORM_HCC__)
 #ifdef CUDA_HALF_INSTRUCTIONS
     return hcos(a);
 #else
@@ -337,7 +337,7 @@ static inline __host__ __device__ half lgamma(half a) {
   }
 
   static inline __host__ __device__ half sin(half a) {
-#ifdef __CUDA_ARCH__
+#if defined(__CUDA_ARCH__) || defined(__HIP_PLATFORM_HCC__)
 #ifdef CUDA_HALF_INSTRUCTIONS
     return hsin(a);
 #else
@@ -350,7 +350,7 @@ static inline __host__ __device__ half lgamma(half a) {
   }
 
   static inline __host__ __device__ half sqrt(half a) {
-#ifdef __CUDA_ARCH__
+#if defined(__CUDA_ARCH__) || defined(__HIP_PLATFORM_HCC__)
 #ifdef CUDA_HALF_INSTRUCTIONS
     return hsqrt(a);
 #else
@@ -363,7 +363,7 @@ static inline __host__ __device__ half lgamma(half a) {
   }
 
   static inline __host__ __device__ half rsqrt(half a) {
-#ifdef __CUDA_ARCH__
+#if defined(__CUDA_ARCH__) || defined(__HIP_PLATFORM_HCC__)
 #ifdef CUDA_HALF_INSTRUCTIONS
     return hrsqrt(a);
 #else
@@ -376,7 +376,7 @@ static inline __host__ __device__ half lgamma(half a) {
   }
 
   static inline __host__ __device__ half ceil(half a) {
-#ifdef __CUDA_ARCH__
+#if defined(__CUDA_ARCH__) || defined(__HIP_PLATFORM_HCC__)
 #ifdef CUDA_HALF_INSTRUCTIONS
     return hceil(a);
 #else
@@ -389,7 +389,7 @@ static inline __host__ __device__ half lgamma(half a) {
   }
 
   static inline __host__ __device__ half floor(half a) {
-#ifdef __CUDA_ARCH__
+#if defined(__CUDA_ARCH__) || defined(__HIP_PLATFORM_HCC__)
 #ifdef CUDA_HALF_INSTRUCTIONS
     return hfloor(a);
 #else
@@ -402,7 +402,7 @@ static inline __host__ __device__ half lgamma(half a) {
   }
 
   static inline __host__ __device__ half trunc(half a) {
-#ifdef __CUDA_ARCH__
+#if defined(__CUDA_ARCH__) || defined(__HIP_PLATFORM_HCC__)
 #ifdef CUDA_HALF_INSTRUCTIONS
     return htrunc(a);
 #else
@@ -415,7 +415,7 @@ static inline __host__ __device__ half lgamma(half a) {
   }
 
   static inline __host__ __device__ half neg(half a) {
-#ifdef __CUDA_ARCH__
+#if defined(__CUDA_ARCH__) || defined(__HIP_PLATFORM_HCC__)
 #ifdef CUDA_HALF_INSTRUCTIONS
     return __hneg(a);
 #else
@@ -428,7 +428,7 @@ static inline __host__ __device__ half lgamma(half a) {
   }
 
   static inline __host__ __device__ half acos(half a) {
-#ifdef __CUDA_ARCH__
+#if defined(__CUDA_ARCH__) || defined(__HIP_PLATFORM_HCC__)
     float fa = __half2float(a);
     return __float2half(acosf(fa));
 #else // __CUDA_ARCH__
@@ -437,7 +437,7 @@ static inline __host__ __device__ half lgamma(half a) {
   }
 
   static inline __host__ __device__ half cosh(half a) {
-#ifdef __CUDA_ARCH__
+#if defined(__CUDA_ARCH__) || defined(__HIP_PLATFORM_HCC__)
     float fa = __half2float(a);
     return __float2half(coshf(fa));
 #else // __CUDA_ARCH__
@@ -446,7 +446,7 @@ static inline __host__ __device__ half lgamma(half a) {
   }
 
   static inline __host__ __device__ half asin(half a) {
-#ifdef __CUDA_ARCH__
+#if defined(__CUDA_ARCH__) || defined(__HIP_PLATFORM_HCC__)
     float fa = __half2float(a);
     return __float2half(asinf(fa));
 #else // __CUDA_ARCH__
@@ -455,7 +455,7 @@ static inline __host__ __device__ half lgamma(half a) {
   }
 
   static inline __host__ __device__ half sinh(half a) {
-#ifdef __CUDA_ARCH__
+#if defined(__CUDA_ARCH__) || defined(__HIP_PLATFORM_HCC__)
     float fa = __half2float(a);
     return __float2half(sinhf(fa));
 #else // __CUDA_ARCH__
@@ -464,7 +464,7 @@ static inline __host__ __device__ half lgamma(half a) {
   }
 
   static inline __host__ __device__ half tan(half a) {
-#ifdef __CUDA_ARCH__
+#if defined(__CUDA_ARCH__) || defined(__HIP_PLATFORM_HCC__)
     float fa = __half2float(a);
     return __float2half(tanf(fa));
 #else // __CUDA_ARCH__
@@ -473,7 +473,7 @@ static inline __host__ __device__ half lgamma(half a) {
   }
 
   static inline __host__ __device__ half atan(half a) {
-#ifdef __CUDA_ARCH__
+#if defined(__CUDA_ARCH__) || defined(__HIP_PLATFORM_HCC__)
     float fa = __half2float(a);
     return __float2half(atanf(fa));
 #else // __CUDA_ARCH__
@@ -482,7 +482,7 @@ static inline __host__ __device__ half lgamma(half a) {
   }
 
   static inline __host__ __device__ half tanh(half a) {
-#ifdef __CUDA_ARCH__
+#if defined(__CUDA_ARCH__) || defined(__HIP_PLATFORM_HCC__)
     float fa = __half2float(a);
     return __float2half(tanhf(fa));
 #else // __CUDA_ARCH__
@@ -492,7 +492,7 @@ static inline __host__ __device__ half lgamma(half a) {
 
 
    static inline __host__ __device__ half erf(half a) {
-#ifdef __CUDA_ARCH__
+#if defined(__CUDA_ARCH__) || defined(__HIP_PLATFORM_HCC__)
     float fa = __half2float(a);
     return __float2half(erff(fa));
 #else // __CUDA_ARCH__
@@ -502,7 +502,7 @@ static inline __host__ __device__ half lgamma(half a) {
 
 
    static inline __host__ __device__ half erfinv(half a) {
-#ifdef __CUDA_ARCH__
+#if defined(__CUDA_ARCH__) || defined(__HIP_PLATFORM_HCC__)
     float fa = __half2float(a);
     return __float2half(erfinvf(fa));
 #else // __CUDA_ARCH__
@@ -511,7 +511,7 @@ static inline __host__ __device__ half lgamma(half a) {
   }
 
   static inline __host__ __device__ half abs(half a) {
-#ifdef __CUDA_ARCH__
+#if defined(__CUDA_ARCH__) || defined(__HIP_PLATFORM_HCC__)
     float fa = __half2float(a);
     return __float2half(fabs(fa));
 #else // __CUDA_ARCH__
@@ -520,7 +520,7 @@ static inline __host__ __device__ half lgamma(half a) {
   }
 
   static inline __host__ __device__ half round(half a) {
-#ifdef __CUDA_ARCH__
+#if defined(__CUDA_ARCH__) || defined(__HIP_PLATFORM_HCC__)
     float fa = __half2float(a);
     return __float2half(roundf(fa));
 #else // __CUDA_ARCH__
@@ -529,7 +529,7 @@ static inline __host__ __device__ half lgamma(half a) {
   }
 
   static inline __host__ __device__ half frac(half a) {
-#ifdef __CUDA_ARCH__
+#if defined(__CUDA_ARCH__) || defined(__HIP_PLATFORM_HCC__)
     float fa = __half2float(a);
     return __float2half(fa - truncf(fa));
 #else // __CUDA_ARCH__
@@ -539,7 +539,7 @@ static inline __host__ __device__ half lgamma(half a) {
   }
 
   static inline __host__ __device__ half cinv(half a) {
-#ifdef __CUDA_ARCH__
+#if defined(__CUDA_ARCH__) || defined(__HIP_PLATFORM_HCC__)
     float fa = __half2float(a);
     return __float2half(1.0f / fa);
 #else // __CUDA_ARCH__
@@ -548,7 +548,7 @@ static inline __host__ __device__ half lgamma(half a) {
   }
 
   static inline __host__ __device__ half add(half a, half b) {
-#ifdef __CUDA_ARCH__
+#if defined(__CUDA_ARCH__) || defined(__HIP_PLATFORM_HCC__)
 #ifdef CUDA_HALF_INSTRUCTIONS
     return __hadd(a, b);
 #else
@@ -562,7 +562,7 @@ static inline __host__ __device__ half lgamma(half a) {
   }
 
   static inline __host__ __device__ half div(half a, half b) {
-#ifdef __CUDA_ARCH__
+#if defined(__CUDA_ARCH__) || defined(__HIP_PLATFORM_HCC__)
     float fa = __half2float(a);
     float fb = __half2float(b);
     return __float2half( fa / fb );
@@ -572,7 +572,7 @@ static inline __host__ __device__ half lgamma(half a) {
   }
 
   static inline __host__ __device__ half mul(half a, half b) {
-#ifdef __CUDA_ARCH__
+#if defined(__CUDA_ARCH__) || defined(__HIP_PLATFORM_HCC__)
 #ifdef CUDA_HALF_INSTRUCTIONS
     return __hmul(a, b);
 #else
@@ -586,7 +586,7 @@ static inline __host__ __device__ half lgamma(half a) {
   }
 
   static inline __host__ __device__ half sub(half a, half b) {
-#ifdef __CUDA_ARCH__
+#if defined(__CUDA_ARCH__) || defined(__HIP_PLATFORM_HCC__)
 #ifdef CUDA_HALF_INSTRUCTIONS
     return __hsub(a, b);
 #else
@@ -600,7 +600,7 @@ static inline __host__ __device__ half lgamma(half a) {
   }
 
   static inline __host__ __device__ half pow(half a, half b) {
-#ifdef __CUDA_ARCH__
+#if defined(__CUDA_ARCH__) || defined(__HIP_PLATFORM_HCC__)
     float fa = __half2float(a);
     float fb = __half2float(b);
     return __float2half(powf(fa, fb));
@@ -610,7 +610,7 @@ static inline __host__ __device__ half lgamma(half a) {
   }
 
   static inline __host__ __device__ half atan2(half a, half b) {
-#ifdef __CUDA_ARCH__
+#if defined(__CUDA_ARCH__) || defined(__HIP_PLATFORM_HCC__)
     float fa = __half2float(a);
     float fb = __half2float(b);
     return __float2half(atan2f(fa, fb));
@@ -737,7 +737,7 @@ struct ScalarConvert {
 template <typename Out>
 struct ScalarConvert<half, Out> {
   static __host__ __device__ Out to(const half v) {
-#ifdef __CUDA_ARCH__
+#if defined(__CUDA_ARCH__) || defined(__HIP_PLATFORM_HCC__)
     return (Out) __half2float(v);
 #else
     return (Out) THC_half2float(v);
@@ -748,7 +748,7 @@ struct ScalarConvert<half, Out> {
 template <typename In>
 struct ScalarConvert<In, half> {
   static __host__ __device__ half to(const In v) {
-#ifdef __CUDA_ARCH__
+#if defined(__CUDA_ARCH__) || defined(__HIP_PLATFORM_HCC__)
     return __float2half((float) v);
 #else
     return THC_float2half((float) v);

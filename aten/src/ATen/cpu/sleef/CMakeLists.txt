IF(MSVC)
  option(BUILD_SHARED_LIBS "Build shared libs" ON)
ELSE(MSVC)
  option(BUILD_SHARED_LIBS "Build shared libs" OFF)
ENDIF(MSVC)
option(SLEEF_SHOW_ERROR_LOG "Show cmake error log." OFF)

set(SLEEF_VERSION_MAJOR 3)
set(SLEEF_VERSION_MINOR 2)
set(SLEEF_SOVERSION ${SLEEF_VERSION_MAJOR})

# Sanity check for in-source builds which we do not want to happen
if(CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR)
  message(FATAL_ERROR "SLEEF does not allow in-source builds.
You can refer to doc/build-with-cmake.md for instructions on how provide a \
separate build directory. Note: Please remove autogenerated file \
`CMakeCache.txt` and directory `CMakeFiles` in the current directory.")
endif()

# Set output directories for the library files
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/lib)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/lib)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/bin)

foreach(CONFIG ${CMAKE_CONFIGURATION_TYPES})
  string(TOUPPER ${CONFIG} CONFIG)
  set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_${CONFIG} ${PROJECT_BINARY_DIR}/lib)
  set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_${CONFIG} ${PROJECT_BINARY_DIR}/lib)
  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_${CONFIG} ${PROJECT_BINARY_DIR}/bin)
endforeach(CONFIG CMAKE_CONFIGURATION_TYPES)

# Path for finding cmake modules
set(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/../third_party/sleef/cmake/Modules)
set(SLEEF_SCRIPT_PATH ${PROJECT_SOURCE_DIR}/../third_party/sleef/cmake/Scripts CACHE PATH
  "Path for finding sleef specific cmake scripts")

# sleef-config.h.in passes cmake settings to the source code
include(${CMAKE_CURRENT_SOURCE_DIR}/Configure.cmake)
configure_file(
  ${PROJECT_SOURCE_DIR}/../third_party/sleef/sleef-config.h.in
  ${PROJECT_BINARY_DIR}/include/sleef-config.h @ONLY)

# Generates object file (shared library) `libsleef`
# Defined in src/libm/CMakeLists.txt via command add_library
set(TARGET_LIBSLEEF "sleef")
set(TARGET_LIBSLEEFGNUABI "sleefgnuabi")
# Generates the sleef.h headers and all the rename headers
# Defined in src/libm/CMakeLists.txt via custom commands and a custom target
set(TARGET_HEADERS "headers")
set(TARGET_MKRENAME "mkrename")
set(TARGET_MKRENAME_GNUABI "mkrename_gnuabi")
set(TARGET_MKMASKED_GNUABI "mkmasked_gnuabi")
set(TARGET_MKDISP "mkdisp")
set(TARGET_MKALIAS "mkalias")
set(TARGET_LIBCOMMON_OBJ "common")
set(TARGET_LIBARRAYMAP_OBJ "arraymap")

function(add_host_executable TARGETNAME)
  if (NOT CMAKE_CROSSCOMPILING)
    add_executable(${TARGETNAME} ${ARGN})
  else()
    add_executable(${TARGETNAME} IMPORTED)
    set_property(TARGET ${TARGETNAME} PROPERTY IMPORTED_LOCATION ${NATIVE_BUILD_DIR}/bin/${TARGETNAME})
  endif()
endfunction()

include_directories("${PROJECT_SOURCE_DIR}/../third_party/sleef/src/common")
include_directories("${PROJECT_SOURCE_DIR}/../third_party/sleef/src/arch")

add_subdirectory("${PROJECT_SOURCE_DIR}/../third_party/sleef/src/libm" "${CMAKE_CURRENT_BINARY_DIR}/sleef/libm")
add_subdirectory("${PROJECT_SOURCE_DIR}/../third_party/sleef/src/common" "${CMAKE_CURRENT_BINARY_DIR}/sleef/common")

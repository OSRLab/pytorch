# HIP_PATH
IF(NOT DEFINED $ENV{HIP_PATH})
  SET(HIP_PATH /opt/rocm/hip)
ELSE()
  SET(HIP_PATH $ENV{HIP_PATH})
ENDIF()

# HCC_PATH
IF(NOT DEFINED $ENV{HCC_PATH})
  SET(HCC_PATH /opt/rocm/hcc)
ELSE()
  SET(HCC_PATH $ENV{HCC_PATH})
ENDIF()

# HIPBLAS_PATH
IF(NOT DEFINED $ENV{HIPBLAS_PATH})
  SET(HIPBLAS_PATH /opt/rocm/hipblas)
ELSE()
  SET(HIPBLAS_PATH $ENV{HIPBLAS_PATH})
ENDIF()

# HIPRNG_PATH
IF(NOT DEFINED $ENV{HIPRNG_PATH})
  SET(HIPRNG_PATH /opt/rocm/hcrng)
ELSE()
  SET(HIPRNG_PATH $ENV{HIPRNG_PATH})
ENDIF()

# HIPSPARSE_PATH
IF(NOT DEFINED $ENV{HIPSPARSE_PATH})
  SET(HIPSPARSE_PATH /opt/rocm/hcsparse)
ELSE()
  SET(HIPSPARSE_PATH $ENV{HIPSPARSE_PATH})
ENDIF()

SET(THRUST_PATH "/root/Thrust")

# load HIP cmake module and load platform id
SET(CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake ${CMAKE_MODULE_PATH} "${HIP_PATH}/cmake")
FIND_PACKAGE(HIP 1.0 REQUIRED)
EXECUTE_PROCESS(COMMAND ${HIP_PATH}/bin/hipconfig -P OUTPUT_VARIABLE PLATFORM)
EXECUTE_PROCESS(COMMAND ${HIP_PATH}/bin/hipconfig --cpp_config OUTPUT_VARIABLE HIP_CXX_FLAGS)
SET(CMAKE_CXX_COMPILER ${HIP_HIPCC_EXECUTABLE})

SET(HIP_CXX_FLAGS "-D__HIP_PLATFORM_HCC__ -I/opt/rocm/hip/include -I/opt/rocm/hcc/include" ${HIP_CXX_FLAGS})

SET(HIP_HIPCC_FLAGS "-DGENERIC_GRID_LAUNCH=1 ${CMAKE_CXX_FLAGS}")
SET(HIP_HIPCC_FLAGS "-DGENERIC_GRID_LAUNCH=1 ${HIP_HIPCC_FLAGS}")
SET(CMAKE_CXX_COMPILER ${HIP_HIPCC_EXECUTABLE})
SET(CMAKE_C_COMPILER ${HIP_HIPCC_EXECUTABLE})
SET(CMAKE_C_FLAGS "-std=c99 -Werror=implicit-function-declaration ${CMAKE_C_FLAGS}")
SET(CMAKE_C_FLAGS "${CMAKE_CXX_FLAGS} ${HIP_CXX_FLAGS}")
SET(CMAKE_CXX_FLAGS  "-std=c++11 ${CMAKE_CXX_FLAGS} ${HIP_CXX_FLAGS}")

SET(CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake ${CMAKE_MODULE_PATH})

FIND_PACKAGE(HIP 1.0 REQUIRED)

MESSAGE(STATUS "ROCM TRUE:")
MESSAGE(STATUS "CMAKE_CXX_COMPILER: " ${CMAKE_CXX_COMPILER})

INCLUDE_DIRECTORIES(${HIPBLAS_PATH}/include)
INCLUDE_DIRECTORIES(${HIPSPARSE_PATH}/include)
INCLUDE_DIRECTORIES(${HIPRNG_PATH}/include)
INCLUDE_DIRECTORIES(${THRUST_PATH})

SET(ATen_CUDA_SRCS ${ATen_CUDA_SRCS}
${CMAKE_CURRENT_SOURCE_DIR}/AbsCriterion.cu
${CMAKE_CURRENT_SOURCE_DIR}/Abs.cu
${CMAKE_CURRENT_SOURCE_DIR}/BatchNormalization.cu
${CMAKE_CURRENT_SOURCE_DIR}/BCECriterion.cu
${CMAKE_CURRENT_SOURCE_DIR}/ClassNLLCriterion.cu
${CMAKE_CURRENT_SOURCE_DIR}/Col2Im.cu
${CMAKE_CURRENT_SOURCE_DIR}/DistKLDivCriterion.cu
${CMAKE_CURRENT_SOURCE_DIR}/ELU.cu
${CMAKE_CURRENT_SOURCE_DIR}/FeatureLPPooling.cu
${CMAKE_CURRENT_SOURCE_DIR}/FusedRNNKernel.cu
${CMAKE_CURRENT_SOURCE_DIR}/GatedLinearUnit.cu
${CMAKE_CURRENT_SOURCE_DIR}/HardTanh.cu
${CMAKE_CURRENT_SOURCE_DIR}/Im2Col.cu
${CMAKE_CURRENT_SOURCE_DIR}/IndexLinear.cu
${CMAKE_CURRENT_SOURCE_DIR}/L1Cost.cu
${CMAKE_CURRENT_SOURCE_DIR}/LeakyReLU.cu
${CMAKE_CURRENT_SOURCE_DIR}/LogSigmoid.cu
${CMAKE_CURRENT_SOURCE_DIR}/LogSoftMax.cu
${CMAKE_CURRENT_SOURCE_DIR}/LookupTableBag.cu
${CMAKE_CURRENT_SOURCE_DIR}/LookupTable.cu
${CMAKE_CURRENT_SOURCE_DIR}/MarginCriterion.cu
${CMAKE_CURRENT_SOURCE_DIR}/MSECriterion.cu
${CMAKE_CURRENT_SOURCE_DIR}/MultiLabelMarginCriterion.cu
${CMAKE_CURRENT_SOURCE_DIR}/MultiMarginCriterion.cu
${CMAKE_CURRENT_SOURCE_DIR}/PReLU.cu
${CMAKE_CURRENT_SOURCE_DIR}/RReLU.cu
${CMAKE_CURRENT_SOURCE_DIR}/Sigmoid.cu
${CMAKE_CURRENT_SOURCE_DIR}/SmoothL1Criterion.cu
${CMAKE_CURRENT_SOURCE_DIR}/SoftMarginCriterion.cu
${CMAKE_CURRENT_SOURCE_DIR}/SoftMax.cu
${CMAKE_CURRENT_SOURCE_DIR}/SoftPlus.cu
${CMAKE_CURRENT_SOURCE_DIR}/SoftShrink.cu
${CMAKE_CURRENT_SOURCE_DIR}/SparseLinear.cu
${CMAKE_CURRENT_SOURCE_DIR}/SpatialAdaptiveAveragePooling.cu
${CMAKE_CURRENT_SOURCE_DIR}/SpatialAdaptiveMaxPooling.cu
${CMAKE_CURRENT_SOURCE_DIR}/SpatialAveragePooling.cu
${CMAKE_CURRENT_SOURCE_DIR}/SpatialClassNLLCriterion.cu
${CMAKE_CURRENT_SOURCE_DIR}/SpatialConvolutionLocal.cu
${CMAKE_CURRENT_SOURCE_DIR}/SpatialConvolutionMM.cu
${CMAKE_CURRENT_SOURCE_DIR}/SpatialCrossMapLRN.cu
${CMAKE_CURRENT_SOURCE_DIR}/SpatialDepthwiseConvolution.cu
${CMAKE_CURRENT_SOURCE_DIR}/SpatialDilatedConvolution.cu
${CMAKE_CURRENT_SOURCE_DIR}/SpatialDilatedMaxPooling.cu
${CMAKE_CURRENT_SOURCE_DIR}/SpatialFractionalMaxPooling.cu
${CMAKE_CURRENT_SOURCE_DIR}/SpatialFullConvolution.cu
${CMAKE_CURRENT_SOURCE_DIR}/SpatialFullDilatedConvolution.cu
${CMAKE_CURRENT_SOURCE_DIR}/SpatialGridSamplerBilinear.cu
${CMAKE_CURRENT_SOURCE_DIR}/SpatialMaxPooling.cu
${CMAKE_CURRENT_SOURCE_DIR}/SpatialMaxUnpooling.cu
${CMAKE_CURRENT_SOURCE_DIR}/SpatialReflectionPadding.cu
${CMAKE_CURRENT_SOURCE_DIR}/SpatialReplicationPadding.cu
${CMAKE_CURRENT_SOURCE_DIR}/SpatialSubSampling.cu
${CMAKE_CURRENT_SOURCE_DIR}/SpatialUpSamplingBilinear.cu
${CMAKE_CURRENT_SOURCE_DIR}/SpatialUpSamplingNearest.cu
${CMAKE_CURRENT_SOURCE_DIR}/Sqrt.cu
${CMAKE_CURRENT_SOURCE_DIR}/Square.cu
${CMAKE_CURRENT_SOURCE_DIR}/Tanh.cu
${CMAKE_CURRENT_SOURCE_DIR}/TemporalConvolution.cu
${CMAKE_CURRENT_SOURCE_DIR}/TemporalMaxPooling.cu
${CMAKE_CURRENT_SOURCE_DIR}/TemporalReflectionPadding.cu
${CMAKE_CURRENT_SOURCE_DIR}/TemporalReplicationPadding.cu
${CMAKE_CURRENT_SOURCE_DIR}/TemporalRowConvolution.cu
${CMAKE_CURRENT_SOURCE_DIR}/TemporalUpSamplingLinear.cu
${CMAKE_CURRENT_SOURCE_DIR}/TemporalUpSamplingNearest.cu
${CMAKE_CURRENT_SOURCE_DIR}/Threshold.cu
${CMAKE_CURRENT_SOURCE_DIR}/VolumetricAdaptiveAveragePooling.cu
${CMAKE_CURRENT_SOURCE_DIR}/VolumetricAdaptiveMaxPooling.cu
${CMAKE_CURRENT_SOURCE_DIR}/VolumetricAveragePooling.cu
${CMAKE_CURRENT_SOURCE_DIR}/VolumetricConvolution.cu
${CMAKE_CURRENT_SOURCE_DIR}/VolumetricDilatedConvolution.cu
${CMAKE_CURRENT_SOURCE_DIR}/VolumetricDilatedMaxPooling.cu
${CMAKE_CURRENT_SOURCE_DIR}/VolumetricFractionalMaxPooling.cu
${CMAKE_CURRENT_SOURCE_DIR}/VolumetricFullConvolution.cu
${CMAKE_CURRENT_SOURCE_DIR}/VolumetricFullDilatedConvolution.cu
${CMAKE_CURRENT_SOURCE_DIR}/VolumetricMaxPooling.cu
${CMAKE_CURRENT_SOURCE_DIR}/VolumetricMaxUnpooling.cu
${CMAKE_CURRENT_SOURCE_DIR}/VolumetricReplicationPadding.cu
${CMAKE_CURRENT_SOURCE_DIR}/VolumetricUpSamplingNearest.cu
${CMAKE_CURRENT_SOURCE_DIR}/VolumetricUpSamplingTrilinear.cu
PARENT_SCOPE)

set(ATen_CUDA_INCLUDE ${ATen_CUDA_INCLUDE}
  "${CMAKE_CURRENT_SOURCE_DIR}"
PARENT_SCOPE)

INSTALL(FILES THCUNN.h DESTINATION "${ATEN_INSTALL_INCLUDE_SUBDIR}/THCUNN")
INSTALL(FILES generic/THCUNN.h DESTINATION "${ATEN_INSTALL_INCLUDE_SUBDIR}/THCUNN/generic")

CMAKE_MINIMUM_REQUIRED(VERSION 2.8 FATAL_ERROR)
CMAKE_POLICY(VERSION 2.8)

# HIP_PATH
IF(NOT DEFINED $ENV{HIP_PATH})
  SET(HIP_PATH /opt/rocm/hip)
ELSE()
  SET(HIP_PATH $ENV{HIP_PATH})
ENDIF()

# HCC_PATH
IF(NOT DEFINED $ENV{HCC_PATH})
  SET(HCC_PATH /opt/rocm/hcc)
ELSE()
  SET(HCC_PATH $ENV{HCC_PATH})
ENDIF()

# HIPBLAS_PATH
IF(NOT DEFINED $ENV{HIPBLAS_PATH})
  SET(HIPBLAS_PATH /opt/rocm/hipblas)
ELSE()
  SET(HIPBLAS_PATH $ENV{HIPBLAS_PATH})
ENDIF()

# HIPRNG_PATH
IF(NOT DEFINED $ENV{HIPRNG_PATH})
  SET(HIPRNG_PATH /opt/rocm/hcrng)
ELSE()
  SET(HIPRNG_PATH $ENV{HIPRNG_PATH})
ENDIF()

# HIPSPARSE_PATH
IF(NOT DEFINED $ENV{HIPSPARSE_PATH})
  SET(HIPSPARSE_PATH /opt/rocm/hcsparse)
ELSE()
  SET(HIPSPARSE_PATH $ENV{HIPSPARSE_PATH})
ENDIF()

SET(THRUST_PATH "~/Thrust")

INCLUDE_DIRECTORIES(${HIPBLAS_PATH}/include)
INCLUDE_DIRECTORIES(${HIPSPARSE_PATH}/include)
INCLUDE_DIRECTORIES(${HIPRNG_PATH}/include)
INCLUDE_DIRECTORIES(${THRUST_PATH})

# load HIP cmake module and load platform id
SET(CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake ${CMAKE_MODULE_PATH} "${HIP_PATH}/cmake")
FIND_PACKAGE(HIP 1.0 REQUIRED)
EXECUTE_PROCESS(COMMAND ${HIP_PATH}/bin/hipconfig -P OUTPUT_VARIABLE PLATFORM)
EXECUTE_PROCESS(COMMAND ${HIP_PATH}/bin/hipconfig --cpp_config OUTPUT_VARIABLE HIP_CXX_FLAGS)
SET(CMAKE_CXX_COMPILER ${HIP_HIPCC_EXECUTABLE})

SET(HIP_CXX_FLAGS "-D__HIP_PLATFORM_HCC__  -I/opt/rocm/hip/include -I/opt/rocm/hcc/include")

SET(HIP_HIPCC_FLAGS "${CMAKE_CXX_FLAGS}")
SET(HIP_HIPCC_FLAGS "-DGENERIC_GRID_LAUNCH=1 ${HIP_HIPCC_FLAGS}")
SET(CMAKE_CXX_COMPILER ${HIP_HIPCC_EXECUTABLE})
SET(CMAKE_C_COMPILER ${HIP_HIPCC_EXECUTABLE})
SET(CMAKE_C_FLAGS "-std=c99 -Werror=implicit-function-declaration ${CMAKE_C_FLAGS}")
SET(CMAKE_C_FLAGS "${CMAKE_CXX_FLAGS} ${HIP_CXX_FLAGS}")
SET(CMAKE_CXX_FLAGS  "-std=c++11 ${CMAKE_CXX_FLAGS} ${HIP_CXX_FLAGS}")

OPTION(NDEBUG "disable asserts (WARNING: this may result in silent UB e.g. with out-of-bound indices)")
IF(NOT NDEBUG)
  MESSAGE(STATUS "Removing -DNDEBUG from compile flags")
  STRING(REPLACE "-DNDEBUG" "" CMAKE_C_FLAGS "" ${CMAKE_C_FLAGS})
  STRING(REPLACE "-DNDEBUG" "" CMAKE_C_FLAGS_DEBUG "" ${CMAKE_C_FLAGS_DEBUG})
  STRING(REPLACE "-DNDEBUG" "" CMAKE_C_FLAGS_RELEASE "" ${CMAKE_C_FLAGS_RELEASE})
  STRING(REPLACE "-DNDEBUG" "" CMAKE_CXX_FLAGS "" ${CMAKE_CXX_FLAGS})
  STRING(REPLACE "-DNDEBUG" "" CMAKE_CXX_FLAGS_DEBUG "" ${CMAKE_CXX_FLAGS_DEBUG})
  STRING(REPLACE "-DNDEBUG" "" CMAKE_CXX_FLAGS_RELEASE "" ${CMAKE_CXX_FLAGS_RELEASE})
ENDIF()

IF(NOT Torch_FOUND)
  FIND_PACKAGE(Torch REQUIRED)
ENDIF()

IF(NOT TH_LIBRARIES)
  SET(TH_LIBRARIES "TH")
ENDIF(NOT TH_LIBRARIES)
MESSAGE(STATUS "TH_LIBRARIES: ${TH_LIBRARIES}")
IF(NOT THC_LIBRARIES)
  SET(THC_LIBRARIES "THC")
ENDIF(NOT THC_LIBRARIES)
MESSAGE(STATUS "THC_LIBRARIES: ${THC_LIBRARIES}")

IF(NOT THCUNN_INSTALL_LIB_SUBDIR)
  SET(THCUNN_INSTALL_LIB_SUBDIR "lib" CACHE PATH "THCUNN install library directory")
  SET(THCUNN_INSTALL_INCLUDE_SUBDIR "include" CACHE PATH "THCUNN install include subdirectory")
ENDIF()

FILE(GLOB src-cuda *.cu)

HIP_INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR})
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/../../HIP)
HIP_ADD_LIBRARY(THCUNN SHARED ${src-cuda})

INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR})
TARGET_LINK_LIBRARIES(THCUNN ${THC_LIBRARIES} ${ATEN_LIBRARIES})

# Luarocks bug pre-14.04 prevents us from setting it for Lua-Torch
IF(THCUNN_SO_VERSION)
  MESSAGE(STATUS "THCUNN_SO_VERSION: ${THCUNN_SO_VERSION}")
  SET_TARGET_PROPERTIES(THCUNN PROPERTIES
    VERSION   ${THCUNN_SO_VERSION}
    SOVERSION ${THCUNN_SO_VERSION})
ENDIF(THCUNN_SO_VERSION)

INSTALL(TARGETS THCUNN LIBRARY DESTINATION ${THCUNN_INSTALL_LIB_SUBDIR})
INSTALL(FILES THCUNN.h DESTINATION "${THCUNN_INSTALL_INCLUDE_SUBDIR}/THCUNN")
INSTALL(FILES generic/THCUNN.h DESTINATION "${THCUNN_INSTALL_INCLUDE_SUBDIR}/THCUNN/generic")

{
  "disabled": [
    {
      "path": "aten/src/THCUNN/generic/SparseLinear.cu",
      "functions": [
        "THNN_(SparseLinear_updateOutput)",
        "THNN_(SparseLinear_accGradParameters)"
      ]
    },
    {
      "path": "aten/src/THCUNN/generic/RReLU.cu",
      "functions": [
        "THNN_(RReLU_updateOutput)",
        "THNN_(RReLU_updateGradInput)"
      ]
    },
    {
      "path": "aten/src/THCUNN/generic/LookupTable.cu",
      "functions": [
        "THNN_(LookupTable_accGradParameters)"
        "THNN_(LookupTable_renorm)"
      ]
    },
    {
      "path": "aten/src/THCUNN/LookupTable.cu",
      "functions": [
        "calculate_norms_and_renorm"
      ]
    },
    {
      "path": "aten/src/THCS/generic/THCSTensorMath.cu",
      "functions": [
        "THCSTensor_(spaddmm)",
        "THCSTensor_(sspaddmm)",
        "THCSTensor_(spcadd)",
        "THCSTensor_(mul)",
        "THCSTensor_(div)",
        "THCSTensor_(cadd)",
        "THCSTensor_(csub)",
        "THCSTensor_(cmul)",
        "THCSTensor_(pow)",
        ""
      ]
    },
    {
      "path": "aten/src/THCS/generic/THCSTensor.cu",
      "functions": [
        "THCSTensor_(toDense)",
        "THCSTensor_(newCoalesce)",
        "THCSTensor_(newFlattenedIndices)",
        "THCSTensor_(transpose)",
        "THCSTensor_(getDevice)"
      ]
    },
    {
      "path": "aten/src/THCS/generic/THCSTensor.cpp",
      "functions": [
        "THCSTensor_(newIndices)",
        "THCSTensor_(newValues)",
        "THCSTensor_(rawInit)",
        "THCSTensor_(rawResize)",
        "THCSTensor_(_move)",
        "THCSTensor_(_set)",
        "THCSTensor_(new)",
        "THCSTensor_(newWithTensor)",
        "THCSTensor_(newWithTensorAndSize)",
        "THCSTensor_(newWithSize)",
        "THCSTensor_(newWithSize1d)",
        "THCSTensor_(newWithSize2d)",
        "THCSTensor_(newWithSize3d)",
        "THCSTensor_(newWithSize4d)",
        "THCSTensor_(newClone)",
        "THCSTensor_(newTranspose)",
        "THCSTensor_(newValuesWithSizeOf)",
        "THCSTensor_(isSameSizeAs)",
        "THCSTensor_(isSameSizeAsDense)",
        "THCSTensor_(resize)",
        "THCSTensor_(resizeAs)",
        "THCSTensor_(resize1d)",
        "THCSTensor_(resize2d)",
        "THCSTensor_(resize3d)",
        "THCSTensor_(resize4d)",
        "THCSTensor_(copy)",
        "THCSTensor_(isCoalesced)",
        "THCSTensor_(free)",
        "THCSTensor_(retain)",
        "THCSTensor_(checkGPU)",
        "THCTensor_(sparseMask)"
      ]
    },
    {
      "path": "aten/src/THCS/THCSparse.cu",
      "functions": [
        "THCudaSparse_Xcoo2csr",
        "convertTransToCusparseOperation",
        "adjustLd",
        "THCudaSparse_Scsrmm2",
        "THCudaSparse_Dcsrmm2",
        "THCudaSparse_CreateIdentityPermutation",
        "THCudaSparse_Xcsrsort_bufferSizeExt",
        "THCudaSparse_Xcsrsort",
        "THCudaSparse_Xcoosort_bufferSizeExt",
        "THCudaSparse_XcoosortByRow"
      ]
    },
    {
      "path": "aten/src/THC/generic/THCTensor.cu",
      "functions": [
        "THCTensor_(getTextureObject)"
      ]
    },
    {
      "path": "aten/src/THCS/generic/THCSTensor.cpp",
      "functions": [
        "THCSTensor_(newIndices)",
        "THCSTensor_(newValues)",
        "THCSTensor_(rawInit)",
        "THCSTensor_(rawResize)",
        "THCSTensor_(_move)",
        "THCSTensor_(_set)",
        "THCSTensor_(new)",
        "THCSTensor_(newWithTensor)",
        "THCSTensor_(newWithTensorAndSize)",
        "THCSTensor_(newWithSize)",
        "THCSTensor_(newWithSize1d)",
        "THCSTensor_(newWithSize2d)",
        "THCSTensor_(newWithSize3d)",
        "THCSTensor_(newWithSize4d)",
        "THCSTensor_(newClone)",
        "THCSTensor_(newTranspose)",
        "THCSTensor_(newValuesWithSizeOf)",
        "THCSTensor_(isSameSizeAs)",
        "THCSTensor_(isSameSizeAsDense)",
        "THCSTensor_(resize)",
        "THCSTensor_(resizeAs)",
        "THCSTensor_(resize1d)",
        "THCSTensor_(resize2d)",
        "THCSTensor_(resize3d)",
        "THCSTensor_(resize4d)",
        "THCSTensor_(copy)",
        "THCSTensor_(isCoalesced)",
        "THCSTensor_(free)",
        "THCSTensor_(retain)",
        "THCSTensor_(checkGPU)",
        "THCTensor_(sparseMask)"
      ]
    }
  ]
}
